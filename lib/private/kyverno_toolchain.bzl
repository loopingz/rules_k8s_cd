load("@aspect_bazel_lib//lib/private:repo_utils.bzl", "repo_utils")
load("//lib:repo_utils.bzl", "download_toolchain_binary")

_binaries = {
    "darwin_amd64": ("https://github.com/kyverno/kyverno/releases/download/v1.15.1/kyverno-cli-v1.15.1_darwin_x86_64.tar.gz", "6875b5836f188b089fe4af6d3be8709a61ccad46d7e39febf06472df19d171f5"),
    "darwin_arm64": ("https://github.com/kyverno/kyverno/releases/download/v1.15.1/kyverno-cli_v1.15.1_darwin_arm64.tar.gz", "a6a2a25b1d0ee1ea564cc3303434096f0313f45fdac1ec453b5f63586b2ebdfb"),
    "linux_amd64": ("https://github.com/kyverno/kyverno/releases/download/v1.15.1/kyverno-cli-v1.15.1_linux_x86_64.tar.gz", "6b252750af3063e698f4d72cbf7599e8b292bd710248e23d0b1c8935e88aee67"),
    "linux_arm64": ("https://github.com/kyverno/kyverno/releases/download/v1.15.1/kyverno-cli-v1.15.1_linux_arm64.tar.gz", "de2a9398cd9d75747e0fd50ce824a31389663a0e50e62481ddf8f52a40172d24"),
}

DEFAULT_KYVERNO_VERSION = "1.9.0"
DEFAULT_KYVERNO_REPOSITORY = "kyverno"

KYVERNO_PLATFORMS = {
    "darwin_amd64": struct(
        release_platform = "macos-amd64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        release_platform = "macos-arm64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        release_platform = "linux-amd64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        release_platform = "linux-arm64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
}

KyvernoInfo = provider(
    doc = "Provide info for executing kyverno",
    fields = {
        "bin": "Executable kyverno binary",
    },
)

def _kyverno_toolchain_impl(ctx):
    binary = ctx.file.bin

    template_variables = platform_common.TemplateVariableInfo({
        "KYVERNO_BIN": binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    kyverno_info = KyvernoInfo(
        bin = binary,
    )

    toolchain_info = platform_common.ToolchainInfo(
        kyvernoinfo = kyverno_info,
        template_variables = template_variables,
        default = default_info,
    )

    return [default_info, toolchain_info, template_variables]

kyverno_toolchain = rule(
    implementation = _kyverno_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
        ),
    },
)

def _kyverno_toolchains_repo_impl(rctx):
    starlark_content = """# @generated by @rules_k8s_cd//kyverno_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@rules_k8s_cd//lib:kyverno_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.kyvernoinfo,
        toolchain_info.template_variables,
    ]

resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@rules_k8s_cd//lib:kyverno_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @rules_k8s_cd//lib/private:kyverno_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the kyverno_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in KYVERNO_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:kyverno_toolchain",
    toolchain_type = "@rules_k8s_cd//lib:kyverno_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    rctx.file("BUILD.bazel", build_content)

kyverno_toolchains_repo = repository_rule(
    _kyverno_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _kyverno_platform_repo_impl(rctx):
    meta = KYVERNO_PLATFORMS[rctx.attr.platform]
    download_toolchain_binary(
        rctx = rctx,
        toolchain_name = "kyverno",
        platform = rctx.attr.platform,
        binary = _binaries[rctx.attr.platform],
    )

kyverno_platform_repo = repository_rule(
    implementation = _kyverno_platform_repo_impl,
    doc = "Fetch external tools needed for kyverno toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = KYVERNO_PLATFORMS.keys()),
    },
)

def _kyverno_host_alias_repo(rctx):
    ext = ".exe" if repo_utils.is_windows(rctx) else ""

    rctx.file("BUILD.bazel", """# @generated by @rules_k8s_cd//lib/private:kyverno_toolchain.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["kyverno{ext}"])
""".format(
        ext = ext,
    ))

    rctx.symlink("../{name}_{platform}/kyverno{ext}".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
        ext = ext,
    ), "kyverno{ext}".format(ext = ext))

kyverno_host_alias_repo = repository_rule(
    _kyverno_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD.bazel file that exports symlinks to the host platform's binaries
    """,
)
