load("@aspect_bazel_lib//lib/private:repo_utils.bzl", "repo_utils")
load("//lib:repo_utils.bzl", "download_toolchain_binary")

_binaries = {
    "darwin_amd64": ("https://github.com/aquasecurity/trivy/releases/download/v0.67.2/trivy_0.67.2_macOS-64bit.tar.gz", "4a5b936a8d89b508ecdc6edd65933b6fe3e9a368796cbdf917fd0df393f26542"),
    "darwin_arm64": ("https://github.com/aquasecurity/trivy/releases/download/v0.67.2/trivy_0.67.2_macOS-ARM64.tar.gz", "6b3163667f29fc608a2ed647c1bd42023af5779349286148190a168c5b3f28f1"),
    "linux_amd64": ("https://github.com/aquasecurity/trivy/releases/download/v0.67.2/trivy_0.67.2_Linux-ARM64.tar.gz", "e4f28390b06cdaaed94f8c49cce2c4c847938b5188aefdeb82453f2e933e57cb"),
    "linux_arm64": ("https://github.com/aquasecurity/trivy/releases/download/v0.67.2/trivy_0.67.2_Linux-64bit.tar.gz", "546511a5514afc813c0b72e4abeea2c16a32228a13a1e5114d927c190e76b1f9"),
}

DEFAULT_TRIVY_VERSION = "0.67.0"
DEFAULT_TRIVY_REPOSITORY = "trivy"

TRIVY_PLATFORMS = {
    "darwin_amd64": struct(
        release_platform = "macos-amd64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        release_platform = "macos-arm64",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        release_platform = "linux-amd64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        release_platform = "linux-arm64",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
}

TrivyInfo = provider(
    doc = "Provide info for executing trivy",
    fields = {
        "bin": "Executable trivy binary",
    },
)

def _trivy_toolchain_impl(ctx):
    binary = ctx.file.bin

    template_variables = platform_common.TemplateVariableInfo({
        "TRIVY_BIN": binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )
    trivy_info = TrivyInfo(
        bin = binary,
    )

    toolchain_info = platform_common.ToolchainInfo(
        trivyinfo = trivy_info,
        template_variables = template_variables,
        default = default_info,
    )

    return [default_info, toolchain_info, template_variables]

trivy_toolchain = rule(
    implementation = _trivy_toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
        ),
    },
)

def _trivy_toolchains_repo_impl(rctx):
    starlark_content = """# @generated by @rules_k8s_cd//trivy_toolchain.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@rules_k8s_cd//lib:trivy_toolchain_type"]
    return [
        toolchain_info,
        toolchain_info.default,
        toolchain_info.trivyinfo,
        toolchain_info.template_variables,
    ]

resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@rules_k8s_cd//lib:trivy_toolchain_type"],
    incompatible_use_toolchain_transition = True,
)
"""
    rctx.file("defs.bzl", starlark_content)

    build_content = """# @generated by @rules_k8s_cd//lib/private:trivy_toolchain.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the trivy_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in TRIVY_PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{user_repository_name}_{platform}//:trivy_toolchain",
    toolchain_type = "@rules_k8s_cd//lib:trivy_toolchain_type",
)
""".format(
            platform = platform,
            user_repository_name = rctx.attr.user_repository_name,
            compatible_with = meta.compatible_with,
        )

    rctx.file("BUILD.bazel", build_content)

trivy_toolchains_repo = repository_rule(
    _trivy_toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "user_repository_name": attr.string(doc = "Base name for toolchains repository"),
    },
)

def _trivy_platform_repo_impl(rctx):
    meta = TRIVY_PLATFORMS[rctx.attr.platform]
    download_toolchain_binary(
        rctx = rctx,
        toolchain_name = "trivy",
        platform = rctx.attr.platform,
        binary = _binaries[rctx.attr.platform],
    )

trivy_platform_repo = repository_rule(
    implementation = _trivy_platform_repo_impl,
    doc = "Fetch external tools needed for trivy toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = TRIVY_PLATFORMS.keys()),
    },
)

def _trivy_host_alias_repo(rctx):
    ext = ".exe" if repo_utils.is_windows(rctx) else ""

    rctx.file("BUILD.bazel", """# @generated by @rules_k8s_cd//lib/private:trivy_toolchain.bzl
package(default_visibility = ["//visibility:public"])
exports_files(["trivy{ext}"])
""".format(
        ext = ext,
    ))

    rctx.symlink("../{name}_{platform}/trivy{ext}".format(
        name = rctx.attr.name,
        platform = repo_utils.platform(rctx),
        ext = ext,
    ), "trivy{ext}".format(ext = ext))

trivy_host_alias_repo = repository_rule(
    _trivy_host_alias_repo,
    doc = """Creates a repository with a shorter name meant for the host platform, which contains
    a BUILD.bazel file that exports symlinks to the host platform's binaries
    """,
)
